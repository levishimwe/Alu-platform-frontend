#!/usr/bin/env node

// Simple test script to validate server configuration
console.log('üîç Testing server configuration...');

try {
  // Test environment variables
  require('dotenv').config();
  
  console.log('‚úÖ Environment variables loaded');
  console.log('üìä DB_HOST:', process.env.DB_HOST ? '‚úÖ Set' : '‚ùå Missing');
  console.log('üìä DB_NAME:', process.env.DB_NAME ? '‚úÖ Set' : '‚ùå Missing');
  console.log('üìä DB_USER:', process.env.DB_USER ? '‚úÖ Set' : '‚ùå Missing');
  console.log('üìä DB_PASSWORD:', process.env.DB_PASSWORD ? '‚úÖ Set' : '‚ùå Missing');
  console.log('üìä JWT_SECRET:', process.env.JWT_SECRET ? '‚úÖ Set' : '‚ùå Missing');
  
  // Test database connection
  console.log('\nüîó Testing database connection...');
  const { testConnection } = require('./config/database');
  
  testConnection()
    .then((connected) => {
      if (connected) {
        console.log('‚úÖ Database connection successful');
        
        // Test loading models
        console.log('\nüì¶ Testing models...');
        try {
          const models = require('./models');
          console.log('‚úÖ Models loaded successfully');
          console.log('üìä Available models:', Object.keys(models));
          
          // Test loading routes
          console.log('\nüõ£Ô∏è  Testing routes...');
          try {
            const authRoutes = require('./routes/auth');
            const projectRoutes = require('./routes/projects');
            const profileRoutes = require('./routes/profiles');
            const messageRoutes = require('./routes/messages');
            const userRoutes = require('./routes/users');
            const adminRoutes = require('./routes/admin');
            const emailRoutes = require('./routes/email');
            
            console.log('‚úÖ All routes loaded successfully');
            
            // Test app initialization
            console.log('\nüöÄ Testing app initialization...');
            const app = require('./app');
            console.log('‚úÖ App initialized successfully');
            
            console.log('\nüéâ All tests passed! Server should work correctly.');
            process.exit(0);
            
          } catch (routeError) {
            console.error('‚ùå Route loading error:', routeError.message);
            process.exit(1);
          }
          
        } catch (modelError) {
          console.error('‚ùå Model loading error:', modelError.message);
          process.exit(1);
        }
        
      } else {
        console.error('‚ùå Database connection failed');
        process.exit(1);
      }
    })
    .catch((dbError) => {
      console.error('‚ùå Database error:', dbError.message);
      process.exit(1);
    });
    
} catch (error) {
  console.error('‚ùå Configuration error:', error.message);
  console.error('Stack trace:', error.stack);
  process.exit(1);
}
